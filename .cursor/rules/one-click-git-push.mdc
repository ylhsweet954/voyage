---
description:
globs:
alwaysApply: false
---

# 一键Git提交规则：根据暂存的代码变更生成标准化的Git提交信息

## 使用说明

当我完成代码编写并使用 `git add` 暂存我要提交的代码后，请帮我生成标准化的提交信息，并自动执行commit和push操作。

## 配置选项

### Push配置

```bash
# 默认推送到当前分支
git push origin HEAD

# 其他可选配置：
# git push origin develop          # 推送到develop分支

# Gerrit评审推送配置 - 完整命令（推荐）
git push origin HEAD:refs/for/$(git branch --show-current)%r=she.yanmin@xydigit.com,r=qing.minlong@xydigit.com,r=zhang.queping@xydigit.com,r=li.zeyu@xydigit.com,r=chen.zhiqiang1@xydigit.com
```

**当前Push配置**: `git push origin HEAD:refs/for/$(git branch --show-current)%r=she.yanmin@xydigit.com,r=qing.minlong@xydigit.com,r=zhang.queping@xydigit.com,r=li.zeyu@xydigit.com,r=chen.zhiqiang1@xydigit.com`


## 工作流程

1. 首先运行 `git diff --cached` 查看暂存的代码变更
2. 分析变更内容，确定提交类型和作用域
3. 生成简洁明了的提交描述
4. 按照公司规范格式组织提交信息
5. 自动执行commit操作
6. 自动执行push操作

## 提交信息格式

```
类型(作用域): 描述
```

## 提交类型规范

- **feat**: 新功能
- **fix**: 修复bug
- **docs**: 文档更新
- **style**: 代码格式调整（不影响功能）
- **refactor**: 重构代码
- **test**: 添加或修改测试
- **chore**: 构建过程或辅助工具的变动
- **perf**: 性能优化
- **ci**: CI/CD相关变更

## 执行步骤

1. 运行 `git diff --cached` 查看暂存变更
2. 根据变更内容分析：
   - 确定提交类型（feat/fix/docs等）
   - 确定作用域（修改的模块/组件）
   - 生成简洁的描述（中文，不超过50字符）
3. 生成最终的提交信息
4. 执行 `git commit -m "提交信息"`
5. 执行配置的push命令（当前：完整的Gerrit推送命令）
6. 显示操作结果和状态

## 注意事项

- 作用域使用英文，描述使用中文
- 描述要简洁明了，突出核心变更
- 一次只处理一个逻辑变更，如果变更过多建议拆分提交
- 建议在执行前确认当前分支和远程仓库状态
- 当前配置使用Gerrit评审系统，推送后会自动创建评审请求
- 如果过程中出现失败，会显示错误信息并提供解决建议
- 提交信息中，不能使用\n换行符
- 全部步骤自动执行，不要询问我

## 提交信息示例：

```
feat(ui): 优化组件插件导入和链接处理逻辑

- 修改组件插件导入方式，统一为 `componentsPlugins`
- 增强链接插件的错误处理，优化 URL 生成逻辑
- 添加参数监控，确保链接动态更新

```
